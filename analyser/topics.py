"""
This module categorizes raw packets and messages of ros2 files based on their topics
This category is in different forms, for example in dictionary(rsu cpm) and class(obu/rsu/network_status)
"""
from __future__ import annotations
from pathlib import Path
from typing import TYPE_CHECKING

import pyshark
from rosbags.rosbag2 import Reader

from network_status import NetworkStatus
from packet_interface import cpm_interface

if TYPE_CHECKING:
    from pathlib import Path


def rsu_cpm(cap: pyshark.capture.file_capture.FileCapture, gui_error: bool = True) -> dict[str, list]:
    """
    generated from pcap of RSU only
    this method get packets(captured) of RSU and create new topic with below format :
    /RSU_#/cpm ( # is station id )
    :param cap: captured packets
    :param gui_error:
    :return: dictionary like : { /RSU_#/cpm : [packet(1),...,packet(n)] , ...  } . (name of this dictionary in code is rsu_cpm_topic_dict )
    """

    # output dictionary
    rsu_cpm_topic_dict = {}

    for pkt in cap:

        # creating topic from station id
        rsu_station_id = str(cpm_interface.get_station_id(pkt))
        topic = "/RSU_" + rsu_station_id + "/cpm"

        if topic in rsu_cpm_topic_dict.keys():
            rsu_cpm_topic_dict[topic].append(pkt)
        else:
            rsu_cpm_topic_dict[topic] = [pkt]

    # creating log for more one topic
    if len(rsu_cpm_topic_dict.keys()) > 1:
        warning_msg = "there are more than one stationID in the RSU file ! (" + str(len(rsu_cpm_topic_dict.keys())) + " rsu station id )"
        print("Warning: ", warning_msg)

    return rsu_cpm_topic_dict


def obu_rsu_cpmn(cap: pyshark.capture.file_capture.FileCapture, obu_id: str) -> dict[str, list]:
    """
    Generated from pcap of OBU only
    this method get packets of obu and create new topic with below format
    /OBU_#/RSU_#/cpm (# is station id)
    :param obu_id:
    :param cap: captured packets
    :return: dictionary like : { /OBU_#/RSU_#/cpm : [packet(1),...,packet(n)] , ...  } . (name of this dictionary in code is obu_rsu_cpm_topic_dict )
    """
    # output dictionary
    obu_rsu_cpm_topic_dict = {}

    for pkt in cap:

        # creating topic from station id
        rsu_station_id = str(cpm_interface.get_station_id(pkt))
        topic = "/OBU_" + obu_id + "/RSU_" + rsu_station_id + "/cpmn"

        if topic in obu_rsu_cpm_topic_dict.keys():
            obu_rsu_cpm_topic_dict[topic].append(pkt)
        else:
            obu_rsu_cpm_topic_dict[topic] = [pkt]

    print("cpm messages received from ", len(obu_rsu_cpm_topic_dict.keys()), " ITS station (RSU)")

    return obu_rsu_cpm_topic_dict


def obu_rsu_network_status(send_cap: pyshark.capture.file_capture.FileCapture,
                           receive_cap: pyshark.capture.file_capture.FileCapture, obu_id: str) -> NetworkStatus | None:
    """
    Generated by comparing the pcap of RSU and OBU
    this method getting packets of obu and rsu and creating new topic with below format
    /OBU_#/RSU_#/network_status (# is station id)
    !!!
    issue: there is a problem if we have more than one rsu station id in rsu file
    !!!
    :param send_cap:
    :param receive_cap:
    :param obu_id:
    :return:
    """
    rsu_cpm_dict: dict = rsu_cpm(send_cap, False)
    obu_rsu_cpm_dict: dict = obu_rsu_cpmn(receive_cap, obu_id)

    rsu_cpm_topic: str = list(rsu_cpm_dict.keys())[0]  # there is a problem if we have more than one key in dictionary
    rsu_station_id_sender: str = rsu_cpm_topic.split("/")[1]  # station id topic of rsu in rsu (sender) file

    obu_rsu_cpm_topics: list = list(obu_rsu_cpm_dict.keys())

    for obu_rsu_cpm_topic in obu_rsu_cpm_topics:

        rsu_station_id_receiver: str = str(obu_rsu_cpm_topic).split("/")[
            2]  # station id topic of rsu in obu (receiver) file
        obu_station_id: str = str(obu_rsu_cpm_topic).split("/")[1]  # station id of obu . (receiver file)

        if rsu_station_id_receiver == rsu_station_id_sender:
            sender_packets: list = rsu_cpm_dict[rsu_cpm_topic]
            receiver_packets: list = obu_rsu_cpm_dict[obu_rsu_cpm_topic]

            obu_rsu_cpm_network_status_class = NetworkStatus(rsu_station_id_sender, obu_station_id, sender_packets,
                                                             receiver_packets)

            return obu_rsu_cpm_network_status_class

    return None


def get_standard_topic(src_file_name, topic, equivalent_topics: list) -> str:
    """
    this function creating standard topic ( standard topic in document) from source file name and
    message topic
    :param equivalent_topics:
    :param src_file_name: source file name
    :param topic: message topic in rosbag file
    :return:
    """
    for topics in equivalent_topics:
        if topic == topics[0]:
            topic = topics[1]
            break

    file_name = "/"+src_file_name.split("/")[-1]

    standard_topic = file_name + topic

    return standard_topic


def collect_topics_from_rosbag2_file(src_list: list[Path], topics: list[str], equivalent_topics: list) -> dict:
    """collect topics from rosbag files

    Args:
        src_list: Source path list.
        topic: Name of topic .
        :param equivalent_topics: this is a list of topics that are equivalent to inputs rosbag2 files topics
        :param topics: topics in input rosbag2 files that must be merged with pcap files
        :param src_list: rosbags files
        :return dictionary like : { topic1:[connection, timestamp, rawdata], ...  }

    """
    ros2file_topic_information = {}  # this dictionary hold messages with input topics from input rosbag files
    for topic in topics:
        for src in src_list:
            with Reader(src) as reader:
                for connection, timestamp, rawdata in reader.messages():
                    if connection.topic == topic:
                        standard_topic = get_standard_topic(src, topic, equivalent_topics)
                        if standard_topic in ros2file_topic_information.keys():
                            ros2file_topic_information[standard_topic].append([connection, timestamp, rawdata])
                        else:
                            ros2file_topic_information[standard_topic] = [[connection, timestamp, rawdata]]

    return ros2file_topic_information
